# encoding: UTF-8

module SeedDump
  class Perform

    def initialize
      @opts = {}
      @ar_options = {} 
      @indent = ""
      @models = []
      @seed_rb = "" 
      @id_set_string = ""
      @verbose = true
      @model_dir = 'app/models/*.rb'
    end

    def setup(env)
      # config
      @opts['ignore_fields'] = (env['IGNORE_FIELDS'] || "created_at,updated_at").split(',')

      puts "Ignore fields #{@opts['ignore_fields']}"
      @opts['with_id'] = !env["WITH_ID"].nil?
      @opts['no-data'] = !env['NO_DATA'].nil?
      @opts['models']  = env['MODELS'] || (env['MODEL'] ? env['MODEL'] : "")
      @opts['file']    = env['FILE'] || "#{Rails.root}/db/seeds.rb"
      @opts['append']  = (!env['APPEND'].nil? && File.exists?(@opts['file']) )
      @ar_options      = env['LIMIT'].to_i > 0 ? { :limit => env['LIMIT'].to_i } : {}
      @indent          = " " * (env['INDENT'].nil? ? 2 : env['INDENT'].to_i)
      @opts['models']  = @opts['models'].split(',').collect {|x| x.underscore.singularize.camelize }
      @opts['split_dump'] = !env['SPLIT_DUMP'].nil?
      @opts['force'] = !env['FORCE'].nil?

      if !@opts['force'] && !@opts['split_dump'] and File.exists?(File.join(Rails.root, 'db', 'seeds.rb'))
        abort "Seeds file already exists! Use FORCE=1 to overwrite"
      end
    end

    def loadModels
      Dir[@model_dir].sort.each do |f|
        model = File.basename(f, '.*').camelize
        @models.push model if @opts['models'].include?(model) || @opts['models'].empty? 
      end
    end

    def dumpAttribute(a_s,r,k,v)

      return if @opts['ignore_fields'].include?(k.to_s)

      v = attribute_for_inspect(r,k)
      if k == 'id' && @opts['with_id']
        @id_set_string = "{ |c| c.#{k} = #{v} }.save"
      else
        a_s.push("#{k.to_sym.inspect} => #{v}") unless k == 'id' && !@opts['with_id']
      end 
    end

    def dumpModel(model)
      @id_set_string = ''
      create_hash = ""
      rows = []
      arr = []
      arr = model.find(:all, @ar_options) unless @opts['no-data']
      arr = arr.empty? ? [model.new] : arr 
      arr.each_with_index { |r,i|
        attr_s = [];
        r.attributes.each { |k,v|
          dumpAttribute(attr_s,r,k,v)
        }
        if @id_set_string.empty?
          rows.push "#{@indent}{ " << attr_s.join(', ') << " }"
        else
          create_hash << "\n#{model}.create" << '( ' << attr_s.join(', ') << ' )' << @id_set_string
        end
      } 
      if @id_set_string.empty?
        "\n#{model}.create([\n" << rows.join(",\n") << "\n])\n"
      else
        create_hash
      end
    end

    def dumpModels
      @seed_rb = ""
      @models.sort.each do |model|
          m = model.constantize
          if m.ancestors.include?(ActiveRecord::Base)
            puts "Adding #{model} seeds." if @verbose

            if m.respond_to?(:translation_class)
              old_flag = @opts['with_id']
              @opts['with_id'] = true
              dump = dumpModel(m)
              @opts['with_id'] = old_flag

              puts " - Including translations for #{model}" if @verbose
              dump += dumpModel(m.translation_class)

            else
              dump = dumpModel(m)
            end
            if block_given?
              yield model, dump
            else
              @seed_rb << dump << "\n\n"
            end
          else
            puts "Skipping non-ActiveRecord model #{model}..." if @verbose
          end
      end
    end

    def model_to_filename(klass)
      klass.to_s.underscore.gsub('/', '_')
    end

    def writeFile(filename, cnt)
      FileUtils.mkdir_p(File.dirname(filename))
      File.open(filename, (@opts['append'] ? "a" : "w")) { |f|
        f << "# encoding: UTF-8\n\n# Autogenerated by the db:seed:dump task\n# Do not hesitate to tweak this to your needs\n" unless @opts['append']
        f << cnt
      }
    end

    #override the rails version of this function to NOT truncate strings
    def attribute_for_inspect(r,k)
      value = r.attributes[k]
      if defined?(CarrierWave) and r.kind_of?(CarrierWave::Mount::Extension)
        r.class.uploaders.keys.collect(&:to_s).include?(k)
        value = r.send(k)
      end
      
      if value.is_a?(String) && value.length > 50
        "#{value}".inspect
      elsif value.is_a?(Date) || value.is_a?(Time)
        %("#{value.to_s(:db)}")
      elsif value.is_a?(BigDecimal)
        value.to_s
      elsif defined?(CarrierWave) and value.kind_of?(CarrierWave::Uploader::Base) and !value.path.nil?
        filepath = value.path
        model_dir = model_to_filename(r.class)
        basedir = File.join(Rails.root, 'db', 'seeds', model_dir)
        FileUtils.mkdir_p(basedir)
        filename = File.basename(filepath)
        saved_file = File.join(basedir, filename)
        FileUtils.cp(filepath, saved_file, :verbose => true)
        "File.open(File.join(Rails.root, 'db', 'seeds', '#{model_dir}', '#{filename}'))"
      else
        value.inspect
      end
    end

    def run(env)

      setup env

      loadModels

      if @opts['split_dump']
        dumpModels do |model, dump|
          filename = File.join(File.dirname(@opts['file']) , 'seeds', model_to_filename(model) + '.rb')
          puts "Writing #{filename}."
          writeFile(filename, dump)
        end
      else
        puts "Appending seeds to #{@opts['file']}." if @opts['append']
        dumpModels

        puts "Writing #{@opts['file']}."
        writeFile(@opts['file'], @seed_rb)
      end

      puts "Done."
    end
  end
end
